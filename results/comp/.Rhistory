A_bar <- ifelse(A_bar > 0.1, 1, 0) # 0.05
A_bar <- A_bar + diag(n)
K_choices <- c(2,3,4,5)
BIC_holder <- numeric(length(K_choices))
for(k_iter in 1:length(K_choices)){
K <- K_choices[k_iter]
label <- fast_cpl(Matrix(A_bar), K)
BIC_holder[k_iter] <- eval_dcsbm_bic(Matrix(A_bar), label, K, poi=T)
}
# after selection
K <- K_choices[which.min(BIC_holder)]
label <- fast_cpl(Matrix(A_bar), K)
for (excluded_idx in excluded_in_segment) {
adj <- A_seq[[excluded_idx]] + diag(n)
log_likelihood <- log_likelihood + eval_dcsbm_like(Matrix(adj), label, poi = TRUE)
}
}
start <- end + 1
}
return(log_likelihood)
}
gap_choice <- c(3,6,9,12)
log_lik_holder <- matrix(NA, nrow=6, ncol = length(gap_choice))
for(iter in 1:length(gap_choice)){
set.seed(1)
gap <- gap_choice[iter]
excluded_indices=seq(gap,100,by=gap)
log_lik_holder[1,iter] <- cal_log_likelihood(Enron, est_CP, excluded_indices)
log_lik_holder[2,iter] <- cal_log_likelihood(Enron, nbs_result, excluded_indices)
log_lik_holder[3,iter] <- cal_log_likelihood(Enron, rdpg_result, excluded_indices)
log_lik_holder[4,iter] <- cal_log_likelihood(Enron, result_est_CP, excluded_indices)
log_lik_holder[5,iter] <- cal_log_likelihood(Enron, kerSeg_result, excluded_indices)
log_lik_holder[6,iter] <- cal_log_likelihood(Enron, gSeg_result, excluded_indices)
}
t(log_lik_holder)
c(which.max(log_lik_holder[,1]), which.max(log_lik_holder[,2]), which.max(log_lik_holder[,3]), which.max(log_lik_holder[,4]))
library(nett)
library(Matrix)
library(reticulate)
np <- import("numpy")
data <- np$load("/Users/allen/Downloads/Enron.npy") # Enron.npy
Enron <- list()
for(iter in 1:dim(data)[1]){ Enron[[iter]] <- data[iter,,] }
n <- dim(Enron[[1]])[1]
num_T <- length(Enron)
est_CP <- c(20, 54, 69, 79)
nbs_result <- c(14, 36, 54, 66, 78)
rdpg_result <- c(19, 32, 51, 63, 68, 80, 88)
result_est_CP <- c(64, 72, 80, 88)
kerSeg_result <- c(6, 21, 51, 89, 95)
gSeg_result <- c(6, 20, 83, 89, 95)
#A_seq <- Enron
#change_points <- est_CP
#change_points <- c(change_points, length(A_seq) + 1)
#log_likelihood <- 0
#start <- 1; cp_idx <- 1
cal_log_likelihood <- function(A_seq, change_points, excluded_indices) {
change_points <- c(change_points,num_T+1)
log_likelihood <- 0
start <- 1
for (cp_idx in seq_along(change_points)) {
end <- change_points[cp_idx] - 1
segment_indices <- setdiff(start:end, excluded_indices)
excluded_in_segment <- intersect(start:end, excluded_indices)
if (length(segment_indices) > 0) {
A_bar <- Reduce("+", A_seq[segment_indices]) / length(segment_indices)  # Mean adjacency matrix # quantile( A_bar[which(A_bar>0,arr.ind = T)], 0.1 )
A_bar <- ifelse(A_bar > 0.1, 1, 0) # 0.05
A_bar <- A_bar + diag(n)
K_choices <- c(2,3,4,5)
BIC_holder <- numeric(length(K_choices))
for(k_iter in 1:length(K_choices)){
K <- K_choices[k_iter]
label <- fast_cpl(Matrix(A_bar), K)
BIC_holder[k_iter] <- eval_dcsbm_bic(Matrix(A_bar), label, K, poi=T)
}
# after selection
K <- K_choices[which.min(BIC_holder)]
label <- fast_cpl(Matrix(A_bar), K)
for (excluded_idx in excluded_in_segment) {
adj <- A_seq[[excluded_idx]] + diag(n)
log_likelihood <- log_likelihood + eval_dcsbm_like(Matrix(adj), label, poi = TRUE)
}
}
start <- end + 1
}
return(log_likelihood)
}
gap_choice <- c(3,6,9,12)
log_lik_holder <- matrix(NA, nrow=6, ncol = length(gap_choice))
for(iter in 1:length(gap_choice)){
set.seed(1)
gap <- gap_choice[iter]
excluded_indices=seq(gap,100,by=gap)
log_lik_holder[1,iter] <- cal_log_likelihood(Enron, est_CP, excluded_indices)
log_lik_holder[2,iter] <- cal_log_likelihood(Enron, nbs_result, excluded_indices)
log_lik_holder[3,iter] <- cal_log_likelihood(Enron, rdpg_result, excluded_indices)
log_lik_holder[4,iter] <- cal_log_likelihood(Enron, result_est_CP, excluded_indices)
log_lik_holder[5,iter] <- cal_log_likelihood(Enron, kerSeg_result, excluded_indices)
log_lik_holder[6,iter] <- cal_log_likelihood(Enron, gSeg_result, excluded_indices)
}
t(log_lik_holder)
c(which.max(log_lik_holder[,1]), which.max(log_lik_holder[,2]), which.max(log_lik_holder[,3]), which.max(log_lik_holder[,4]))
library(nett)
library(Matrix)
library(CPDstergm)
data("MITphone")
A_bar <- MITphont[[25]]
A_bar <- MITphone[[25]]
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
label
K <- 2
label <- fast_cpl(Matrix(A_bar), K)
A_bar <- MITphone[[26]]
K <- 2
label <- fast_cpl(Matrix(A_bar), K)
A_bar <- MITphone[[96]]
K <- 2
label <- fast_cpl(Matrix(A_bar), K)
label
A_bar <- MITphone[[96]]
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
A_bar <- MITphone[[56]]
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
label
K <- 2
label <- fast_cpl(Matrix(A_bar), K)
label
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
label
compute_block_sums <- function(A, z) {
# A: a sparse adjacency matrix
# z: a label vector
# Outputs the matrix B[k,l] = sum_{i,j} A[i,j] 1{z_i = k, z_j = l}
sA = Matrix::summary(A)
return(as.matrix(Matrix::sparseMatrix(i = z[sA$i], j = z[sA$j], x = sA$x)))
}
label_vec2mat <- function(z, K=NULL, sparse=FALSE) {
if (is.null(K)) K <- max(z)
if (K==1)
return( as.matrix( rep(1,length(z)) , ncol=1) )
else {
if (sparse) {
return( Matrix::Diagonal(K)[z,] )
} else {
return( diag(K)[z,] )
}
}
}
A <- A_bar
z <- label
poi = TRUE, eps = 1e-6
poi = TRUE
eps = 1e-6
Bsum = compute_block_sums(A,z)
compute_block_sums <- function(A, z) {
# A: a sparse adjacency matrix
# z: a label vector
# Outputs the matrix B[k,l] = sum_{i,j} A[i,j] 1{z_i = k, z_j = l}
sA = Matrix::summary(A)
return(as.matrix(Matrix::sparseMatrix(i = z[sA$i], j = z[sA$j], x = sA$x)))
}
label_vec2mat <- function(z, K=NULL, sparse=FALSE) {
if (is.null(K)) K <- max(z)
if (K==1)
return( as.matrix( rep(1,length(z)) , ncol=1) )
else {
if (sparse) {
return( Matrix::Diagonal(K)[z,] )
} else {
return( diag(K)[z,] )
}
}
}
Bsum = compute_block_sums(A,z)
A <- Matrix(A_bar)
z <- label
Bsum = compute_block_sums(A,z)
Bsum
degs = Matrix::rowSums(A)
degs
total_clust_degs = Matrix::rowSums(Bsum)
otal_clust_degs
total_clust_degs
theta = degs/total_clust_degs[z]
theta
Z = label_vec2mat(z)
Z
as.numeric(theta)
theta
Zth = Z * as.numeric(theta)
Zth
sA = Matrix::summary(A)
sA
sum(A_bar)
?Matrix::summart
?Matrix::summary
Matrix::summary
Matrix::summary
sA
sA = Matrix::summary(A)
ii = sA$i
jj = sA$j
xx = sA$x # xx could still contain 0s
nz_idx = (xx > 0) & (jj > ii) # pick the upper triangular part
ix = ii[nz_idx]
jx = jj[nz_idx]
aa = xx[nz_idx]
zi = z[ix]
zj = z[jx]
pp =  truncate_to_ab(theta[ix] * theta[jx] * Bsum[(zi-1)*ncol(Bsum)+zj], eps, 1-eps)
truncate_to_ab = function(x, a, b) {
pmin(pmax(x, a), b)
}
pp =  truncate_to_ab(theta[ix] * theta[jx] * Bsum[(zi-1)*ncol(Bsum)+zj], eps, 1-eps)
zi
zj
ncol(Bsum)
Bsum
total_clust_degs
theta
total_clust_degs[z]
Z
Z * as.numeric(theta)
library(nett)
library(Matrix)
library(CPDstergm)
data("MITphone")
A_bar <- MITphone[[56]]
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
label
truncate_to_ab = function(x, a, b) {
pmin(pmax(x, a), b)
}
compute_block_sums <- function(A, z) {
# A: a sparse adjacency matrix
# z: a label vector
# Outputs the matrix B[k,l] = sum_{i,j} A[i,j] 1{z_i = k, z_j = l}
sA = Matrix::summary(A)
return(as.matrix(Matrix::sparseMatrix(i = z[sA$i], j = z[sA$j], x = sA$x)))
}
label_vec2mat <- function(z, K=NULL, sparse=FALSE) {
if (is.null(K)) K <- max(z)
if (K==1)
return( as.matrix( rep(1,length(z)) , ncol=1) )
else {
if (sparse) {
return( Matrix::Diagonal(K)[z,] )
} else {
return( diag(K)[z,] )
}
}
}
A <- Matrix(A_bar)
z <- label
Bsum = compute_block_sums(A,z)
degs = Matrix::rowSums(A)
total_clust_degs = Matrix::rowSums(Bsum)
theta = degs/total_clust_degs[z] # unit normalization for theta
Z = label_vec2mat(z)
Zth = Z * as.numeric(theta)
sA = Matrix::summary(A)
ii = sA$i
jj = sA$j
xx = sA$x # xx could still contain 0s
nz_idx = (xx > 0) & (jj > ii) # pick the upper triangular part
ix = ii[nz_idx]
jx = jj[nz_idx]
aa = xx[nz_idx]
zi = z[ix]
zj = z[jx]
pp =  truncate_to_ab(theta[ix] * theta[jx] * Bsum[(zi-1)*ncol(Bsum)+zj], eps, 1-eps)
if (!poi) { # Bernoulli, slow computation, high mem
warning('Bernoulli likelihood computation is slow. Try "poi = TRUE" option.')
term1 = sum(aa * log(pp/(1-pp)))
mm = truncate_to_ab(Zth %*% Bsum %*% t(Zth), eps, 1-eps) # mean matrix
term2 = sum( log(1-mm[which(upper.tri(mm))]) )
} else { # Poisson
term1 = sum(aa * log(pp))
# The next line computes \sum_{i < j} Phat_{ij} where Phat_{ij} = \theta_i \theta_j Bsum_{z_i, z_j}
# assuming unit theta-normalization
# that is, \theta \sum_{z_i = k} \theta_i = 1
#term2 = sum( (1-colSums(Zth^2))*diag(Bsum)/2 ) + (sum(Bsum) - sum(diag(Bsum)))/2  # fast
# so that n is hided
term2 = sum(Bsum)/2 - sum(colSums(Zth^2)*diag(Bsum)/2)
term2 = -term2
# # slow, high mem approach
# mm = truncate_to_ab(Zth %*% Bsum %*% t(Zth), eps, 1-eps) # mean matrix
# term2 = - sum( mm[which(upper.tri(mm))] )
}
poi = TRUE
eps = 1e-6
Bsum = compute_block_sums(A,z)
degs = Matrix::rowSums(A)
total_clust_degs = Matrix::rowSums(Bsum)
theta = degs/total_clust_degs[z] # unit normalization for theta
Z = label_vec2mat(z)
Zth = Z * as.numeric(theta)
sA = Matrix::summary(A)
ii = sA$i
jj = sA$j
xx = sA$x # xx could still contain 0s
nz_idx = (xx > 0) & (jj > ii) # pick the upper triangular part
ix = ii[nz_idx]
jx = jj[nz_idx]
aa = xx[nz_idx]
zi = z[ix]
zj = z[jx]
pp =  truncate_to_ab(theta[ix] * theta[jx] * Bsum[(zi-1)*ncol(Bsum)+zj], eps, 1-eps)
if (!poi) { # Bernoulli, slow computation, high mem
warning('Bernoulli likelihood computation is slow. Try "poi = TRUE" option.')
term1 = sum(aa * log(pp/(1-pp)))
mm = truncate_to_ab(Zth %*% Bsum %*% t(Zth), eps, 1-eps) # mean matrix
term2 = sum( log(1-mm[which(upper.tri(mm))]) )
} else { # Poisson
term1 = sum(aa * log(pp))
# The next line computes \sum_{i < j} Phat_{ij} where Phat_{ij} = \theta_i \theta_j Bsum_{z_i, z_j}
# assuming unit theta-normalization
# that is, \theta \sum_{z_i = k} \theta_i = 1
#term2 = sum( (1-colSums(Zth^2))*diag(Bsum)/2 ) + (sum(Bsum) - sum(diag(Bsum)))/2  # fast
# so that n is hided
term2 = sum(Bsum)/2 - sum(colSums(Zth^2)*diag(Bsum)/2)
term2 = -term2
# # slow, high mem approach
# mm = truncate_to_ab(Zth %*% Bsum %*% t(Zth), eps, 1-eps) # mean matrix
# term2 = - sum( mm[which(upper.tri(mm))] )
}
n = nrow(A)
ns = as.vector(table(z))
ns[ns == 0] = 1
term3 = sum(ns * log(ns/n))
return(term1 + term2 + term3)
term1 + term2 + term3
theta
Bsum
library(nett)
library(Matrix)
library(CPDstergm)
data("MITphone")
A_bar <- MITphone[[56]]
K <- 3
label <- fast_cpl(Matrix(A_bar), K)
truncate_to_ab = function(x, a, b) {
pmin(pmax(x, a), b)
}
compute_block_sums <- function(A, z) {
# A: a sparse adjacency matrix
# z: a label vector
# Outputs the matrix B[k,l] = sum_{i,j} A[i,j] 1{z_i = k, z_j = l}
sA = Matrix::summary(A)
return(as.matrix(Matrix::sparseMatrix(i = z[sA$i], j = z[sA$j], x = sA$x)))
}
label_vec2mat <- function(z, K=NULL, sparse=FALSE) {
if (is.null(K)) K <- max(z)
if (K==1)
return( as.matrix( rep(1,length(z)) , ncol=1) )
else {
if (sparse) {
return( Matrix::Diagonal(K)[z,] )
} else {
return( diag(K)[z,] )
}
}
}
A <- Matrix(A_bar)
z <- label
poi = TRUE
eps = 1e-6
Bsum = compute_block_sums(A,z)
Bsum
degs
degs = Matrix::rowSums(A)
total_clust_degs = Matrix::rowSums(Bsum)
theta = degs/total_clust_degs[z] # unit normalization for theta
total_clust_degs
Bsum
Z = label_vec2mat(z)
Z
tail(z)
Z = label_vec2mat(z)
Zth = Z * as.numeric(theta)
Zth
Z[]91:96
Zth
Z[91:96,]
theta[91:96]
sA = Matrix::summary(A)
sA
sum(A)
sum(A)/2
A[66,94]
A[64,94]
sA = Matrix::summary(A)
ii = sA$i
jj = sA$j
xx = sA$x # xx could still contain 0s
ii
xx
nz_idx = (xx > 0) & (jj > ii) # pick the upper triangular part
ix = ii[nz_idx]
jx = jj[nz_idx]
aa = xx[nz_idx]
aa
zi = z[ix]
zj = z[jx]
(zi-1)*ncol(Bsum)+zj
Bsum
pp =  truncate_to_ab(theta[ix] * theta[jx] * Bsum[(zi-1)*ncol(Bsum)+zj], eps, 1-eps)
colSums(Zth^2)
Zth^2
diag(Bsum)
colSums(Zth^2)*diag(Bsum)
colSums(Zth^2)
n = nrow(A)
ns = as.vector(table(z))
ns
ns == 0
log(1)
setwd("~/Downloads/comp")
load("~/Downloads/comp/f1_n50_gSeg_fro.RData")
colMeans(resutls)
colMeans(results)
View(results)
load("~/Downloads/comp/f1_n50_gSeg_net.RData")
colMeans(results)
colMeans(results)
load("~/Downloads/comp/f1_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f1_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f2_n50_gSeg_net.RData")
colMeans(results)
View(results)
load("~/Downloads/comp/f2_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f2_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f2_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f3_n50_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f3_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f3_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f3_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f4_n50_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f4_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f4_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f4_n50_kerSeg_net.RData")
load("~/Downloads/comp/f4_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f5_n50_gSeg_net.RData")
load("~/Downloads/comp/f5_n50_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f5_n50_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f5_n50_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f5_n50_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f1_n100_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f1_n100_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f1_n100_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f1_n100_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f2_n100_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f2_n100_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f2_n100_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f2_n100_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f3_n100_gSeg_net.RData")
load("~/Downloads/comp/f3_n100_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f3_n100_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f3_n100_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f3_n100_kerSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f5_n100_gSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f5_n100_kerSeg_net.RData")
colMeans(results)
load("~/Downloads/comp/f5_n100_gSeg_fro.RData")
colMeans(results)
load("~/Downloads/comp/f5_n100_kerSeg_fro.RData")
colMeans(results)
