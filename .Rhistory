greedy = output_holder_g,
greedyl1 = output_holder_gl1
)
#save(results, file = paste0("results/", scenario, "_", num_node, ".RData"))
return(results)
}
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate_coverage <- function(scenario, true_cp, num_node = 50, num_seq = 10,
threshold_C = 0.1, alpha = 0.05) {
# Simulate_coverage returns 4 metrics & interval coverage
# For a single threshold
# Returning a matrix
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, num_layer) # needed for model selection (Question: should be used as input to some FUNC)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 4)
output_holder <- array(NA, dim = c(num_seq, 4))
coverage_holder <- array(NA, dim = c(num_seq, length(true_cp)))
lengths_holder <- array(NA, dim = c(num_seq, length(true_cp)))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = FALSE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_C * num_node*sqrt(num_layer)*(log(num_T/2))^(3/2),
method = "Greedy", obj.B = B.tensor.odd)
detected_CP <- refinement1(sort(results_g[[2]]$results[, 1]), A.tensor.even, B.tensor.odd, hat.rank)
output_holder[seq_iter, ] <- as.numeric(eval_CP(true_CP, 2*detected_CP, num_T))
cat("\tDetected Greedy CP  :", 2*detected_CP, "Metrics: ", output_holder[seq_iter, ], "\n")
CI <- construct_CI(alpha, detected_CP, A.tensor.even, B.tensor.odd, hat.rank)
coverage_out <- coverage(true_cp, CI[, 2]*2, CI[, 3]*2, CI[, 4]*2)
coverage_holder[seq_iter, ] <- coverage_out$covered
lengths_holder[seq_iter, ] <- coverage_out$lengths
cat("\tRefined (Coverage) CP :", 2*CI[, 2], "Coverage: ", coverage_holder[seq_iter, ],
"Lengths: ", lengths_holder[seq_iter, ],"\n")
}
results <- output_holder
results <- list(
output_holder,
coverage_holder,
lengths_holder
)
save(results, file = paste0("results/coverage_", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f1" # f1, f2, f3, f4, f5, f6
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f5") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f6") {
true_CP <- c()
} else {
stop("Invalid scenario!")
}
num_node <- 100
num_seq <- 100
#results <- simulate_sensitivity(scenario, true_CP, num_node, num_seq)
results <- simulate_coverage(scenario, true_CP, num_node, num_seq)
colMeans(results[[1]]) # Original 4 metrics
results[[2]] # Coverage indicators
results[[3]] # Lengths, (-1 if not estimated)
# Number of non-evaluated
apply(results[[2]], 2, function(col) {sum(col == -1, na.rm = TRUE)})
# Coverage per change point, filtering -1
apply(results[[2]], 2, function(col) {mean(col[col != -1], na.rm = TRUE)})
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Lengths per change point, filtering -1
apply(results[[3]], 2, function(col) {mean(col[col != -1], na.rm = TRUE)})
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
# Median lengths per change point, filtering -1
apply(results[[3]], 2, function(col) {median(col[col != -1], na.rm = TRUE)})
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate_coverage <- function(scenario, true_cp, num_node = 50, num_seq = 10,
threshold_C = 0.1, alpha = 0.05) {
# Simulate_coverage returns 4 metrics & interval coverage
# For a single threshold
# Returning a matrix
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, num_layer) # needed for model selection (Question: should be used as input to some FUNC)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 4)
output_holder <- array(NA, dim = c(num_seq, 4))
coverage_holder <- array(NA, dim = c(num_seq, length(true_cp)))
lengths_holder <- array(NA, dim = c(num_seq, length(true_cp)))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = FALSE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_C * num_node*sqrt(num_layer)*(log(num_T/2))^(3/2),
method = "Greedy", obj.B = B.tensor.odd)
detected_CP <- refinement1(sort(results_g[[2]]$results[, 1]), A.tensor.even, B.tensor.odd, hat.rank)
output_holder[seq_iter, ] <- as.numeric(eval_CP(true_CP, 2*detected_CP, num_T))
cat("\tDetected Greedy CP  :", 2*detected_CP, "Metrics: ", output_holder[seq_iter, ], "\n")
CI <- construct_CI(alpha, detected_CP, A.tensor.even, B.tensor.odd, hat.rank)
coverage_out <- coverage(true_cp, CI[, 2]*2, CI[, 3]*2, CI[, 4]*2)
coverage_holder[seq_iter, ] <- coverage_out$covered
lengths_holder[seq_iter, ] <- coverage_out$lengths
cat("\tRefined (Coverage) CP :", 2*CI[, 2], "Coverage: ", coverage_holder[seq_iter, ],
"Lengths: ", lengths_holder[seq_iter, ],"\n")
}
results <- output_holder
results <- list(
output_holder,
coverage_holder,
lengths_holder
)
save(results, file = paste0("results/coverage_", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f2" # f1, f2, f3, f4, f5, f6
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f5") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f6") {
true_CP <- c()
} else {
stop("Invalid scenario!")
}
num_node <- 100
num_seq <- 100
#results <- simulate_sensitivity(scenario, true_CP, num_node, num_seq)
results <- simulate_coverage(scenario, true_CP, num_node, num_seq)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate_coverage <- function(scenario, true_cp, num_node = 50, num_seq = 10,
threshold_C = 0.1, alpha = 0.05) {
# Simulate_coverage returns 4 metrics & interval coverage
# For a single threshold
# Returning a matrix
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, num_layer) # needed for model selection (Question: should be used as input to some FUNC)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 4)
output_holder <- array(NA, dim = c(num_seq, 4))
coverage_holder <- array(NA, dim = c(num_seq, length(true_cp)))
lengths_holder <- array(NA, dim = c(num_seq, length(true_cp)))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = FALSE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_C * num_node*sqrt(num_layer)*(log(num_T/2))^(3/2),
method = "Greedy", obj.B = B.tensor.odd)
detected_CP <- refinement1(sort(results_g[[2]]$results[, 1]), A.tensor.even, B.tensor.odd, hat.rank)
output_holder[seq_iter, ] <- as.numeric(eval_CP(true_CP, 2*detected_CP, num_T))
cat("\tDetected Greedy CP  :", 2*detected_CP, "Metrics: ", output_holder[seq_iter, ], "\n")
CI <- construct_CI(alpha, detected_CP, A.tensor.even, B.tensor.odd, hat.rank)
coverage_out <- coverage(true_cp, CI[, 2]*2, CI[, 3]*2, CI[, 4]*2)
coverage_holder[seq_iter, ] <- coverage_out$covered
lengths_holder[seq_iter, ] <- coverage_out$lengths
cat("\tRefined (Coverage) CP :", 2*CI[, 2], "Coverage: ", coverage_holder[seq_iter, ],
"Lengths: ", lengths_holder[seq_iter, ],"\n")
}
results <- output_holder
results <- list(
output_holder,
coverage_holder,
lengths_holder
)
save(results, file = paste0("results/coverage_", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f3" # f1, f2, f3, f4, f5, f6
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f5") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f6") {
true_CP <- c()
} else {
stop("Invalid scenario!")
}
num_node <- 100
num_seq <- 100
#results <- simulate_sensitivity(scenario, true_CP, num_node, num_seq)
results <- simulate_coverage(scenario, true_CP, num_node, num_seq)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate_coverage <- function(scenario, true_cp, num_node = 50, num_seq = 10,
threshold_C = 0.1, alpha = 0.05) {
# Simulate_coverage returns 4 metrics & interval coverage
# For a single threshold
# Returning a matrix
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, num_layer) # needed for model selection (Question: should be used as input to some FUNC)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 4)
output_holder <- array(NA, dim = c(num_seq, 4))
coverage_holder <- array(NA, dim = c(num_seq, length(true_cp)))
lengths_holder <- array(NA, dim = c(num_seq, length(true_cp)))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = FALSE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_C * num_node*sqrt(num_layer)*(log(num_T/2))^(3/2),
method = "Greedy", obj.B = B.tensor.odd)
detected_CP <- refinement1(sort(results_g[[2]]$results[, 1]), A.tensor.even, B.tensor.odd, hat.rank)
output_holder[seq_iter, ] <- as.numeric(eval_CP(true_CP, 2*detected_CP, num_T))
cat("\tDetected Greedy CP  :", 2*detected_CP, "Metrics: ", output_holder[seq_iter, ], "\n")
CI <- construct_CI(alpha, detected_CP, A.tensor.even, B.tensor.odd, hat.rank)
coverage_out <- coverage(true_cp, CI[, 2]*2, CI[, 3]*2, CI[, 4]*2)
coverage_holder[seq_iter, ] <- coverage_out$covered
lengths_holder[seq_iter, ] <- coverage_out$lengths
cat("\tRefined (Coverage) CP :", 2*CI[, 2], "Coverage: ", coverage_holder[seq_iter, ],
"Lengths: ", lengths_holder[seq_iter, ],"\n")
}
results <- output_holder
results <- list(
output_holder,
coverage_holder,
lengths_holder
)
save(results, file = paste0("results/coverage_", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f4" # f1, f2, f3, f4, f5, f6
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f5") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f6") {
true_CP <- c()
} else {
stop("Invalid scenario!")
}
num_node <- 100
num_seq <- 100
#results <- simulate_sensitivity(scenario, true_CP, num_node, num_seq)
results <- simulate_coverage(scenario, true_CP, num_node, num_seq)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("eval.R")
source("gen_data.R")
source("CI.R")
simulate_coverage <- function(scenario, true_cp, num_node = 50, num_seq = 10,
threshold_C = 0.1, alpha = 0.05) {
# Simulate_coverage returns 4 metrics & interval coverage
# For a single threshold
# Returning a matrix
A.all_seq <- generate(scenario, num_node, 1, FALSE)
num_T <- dim(A.all_seq)[2]
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, num_layer) # needed for model selection (Question: should be used as input to some FUNC)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 4)
output_holder <- array(NA, dim = c(num_seq, 4))
coverage_holder <- array(NA, dim = c(num_seq, length(true_cp)))
lengths_holder <- array(NA, dim = c(num_seq, length(true_cp)))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq) {
cat("\nIteration", seq_iter, "begin.\n")
set.seed(seq_iter)
# Generate Data 1-by-1
A.all_seq <- generate(scenario, num_node, 1, FALSE)
A.tensor <- A.all_seq[1,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
gains <- cusum_on_intervals(CUSUM_step1, A.tensor.even, verbose = FALSE, intervals, obj.B = B.tensor.odd)
results_g <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = gains, verbose = FALSE,
threshold = threshold_C * num_node*sqrt(num_layer)*(log(num_T/2))^(3/2),
method = "Greedy", obj.B = B.tensor.odd)
detected_CP <- refinement1(sort(results_g[[2]]$results[, 1]), A.tensor.even, B.tensor.odd, hat.rank)
output_holder[seq_iter, ] <- as.numeric(eval_CP(true_CP, 2*detected_CP, num_T))
cat("\tDetected Greedy CP  :", 2*detected_CP, "Metrics: ", output_holder[seq_iter, ], "\n")
CI <- construct_CI(alpha, detected_CP, A.tensor.even, B.tensor.odd, hat.rank)
coverage_out <- coverage(true_cp, CI[, 2]*2, CI[, 3]*2, CI[, 4]*2)
coverage_holder[seq_iter, ] <- coverage_out$covered
lengths_holder[seq_iter, ] <- coverage_out$lengths
cat("\tRefined (Coverage) CP :", 2*CI[, 2], "Coverage: ", coverage_holder[seq_iter, ],
"Lengths: ", lengths_holder[seq_iter, ],"\n")
}
results <- output_holder
results <- list(
output_holder,
coverage_holder,
lengths_holder
)
save(results, file = paste0("results/coverage_", scenario, "_", num_node, ".RData"))
return(results)
}
scenario <- "f5" # f1, f2, f3, f4, f5, f6
if (scenario == "f1") {
true_CP <- c(70, 140)
} else if (scenario == "f2") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f3") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f4") {
true_CP <- c(20, 60, 80, 160, 180)
} else if (scenario == "f5") {
true_CP <- c(50, 100, 150)
} else if (scenario == "f6") {
true_CP <- c()
} else {
stop("Invalid scenario!")
}
num_node <- 100
num_seq <- 100
#results <- simulate_sensitivity(scenario, true_CP, num_node, num_seq)
results <- simulate_coverage(scenario, true_CP, num_node, num_seq)
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_gSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_gSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_gSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_kerSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_kerSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_proposed.RData")
# printing
output
load("~/Documents/GitHub/CPDmrdpg/real_data/results/trade_gSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/trade_gSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/trade_kerSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/trade_kerSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/trade_proposed.RData")
# printing
output
kerSeg_net
kerSeg_fro
gSeg_net
gSeg_fro
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_gSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_gSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_kerSeg_fro.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_kerSeg_net.RData")
load("~/Documents/GitHub/CPDmrdpg/real_data/results/AT_proposed.RData")
# printing
output
kerSeg_net
kerSeg_fro
gSeg_net
gSeg_fro
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_50.RData")
colMeans(results[[1]]) # Original 4 metrics
results[[2]] # Coverage indicators
results[[3]] # Lengths, (-1 if not estimated)
# Number of non-evaluated
apply(results[[2]], 2, function(col) {sum(col == -1, na.rm = TRUE)})
# Coverage per change point, filtering -1
apply(results[[2]], 2, function(col) {mean(col[col != -1], na.rm = TRUE)})
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Lengths per change point, filtering -1
apply(results[[3]], 2, function(col) {mean(col[col != -1], na.rm = TRUE)})
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f2_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f3_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f4_50.RData")
# Coverage per change point, filtering -1
apply(results[[2]], 2, function(col) {mean(col[col != -1], na.rm = TRUE)})
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f2_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f3_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f4_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
setwd("~/Documents/GitHub/MRDPG")
?vapply
setwd("~/Documents/GitHub/CPDmrdpg")
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_50.RData")
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_50.RData")
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f2_50.RData")
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f2_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f3_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f4_50.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f1_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f2_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f3_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
load("~/Documents/GitHub/CPDmrdpg/results/coverage_f4_100.RData")
# Average coverage, filtering -1
mean(results[[2]][results[[2]] != -1], na.rm = TRUE)
# Average lenghts, filtering -1
mean(results[[3]][results[[3]] != -1], na.rm = TRUE)
