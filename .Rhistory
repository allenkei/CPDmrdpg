beta <- lapply(beta, function(b, adj) b - adj, f_bar)
plot(unlist(beta))
dotPlot?
?dotPlot
dotPlot
?dotplot
plot
?plot
?Plot
?dotPlot
?dotchart
A.tensor <- array(NA, c(150, 50, 50, 4))
sbm_params <- get_sbm_params(n=50, L=4, n_c=c(4, 4), flip_layer=TRUE)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("utility.R")
A.tensor <- array(NA, c(150, 50, 50, 4))
setwd("~/Desktop/Research/MRDPG/CPDmrdpg")
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("utility.R")
A.tensor <- array(NA, c(150, 50, 50, 4))
sbm_params <- get_sbm_params(n=50, L=4, n_c=c(4, 4), flip_layer=TRUE)
probability_1 = sbm_params[[1]]
probability_2 = sbm_params[[2]]
for(t_iter in 1:50) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_1)
for(t_iter in 51:100) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_2)
for(t_iter in 101:150) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_1)
library(rTensor)
source("SBS.R")
source("CUSUM.R")
source("utility.R")
A.tensor <- array(NA, c(150, 50, 50, 4))
sbm_params <- get_sbm_params(n=50, L=4, n_c=c(4, 4), flip_layer=TRUE)
source("simulate_data.R")
A.tensor <- array(NA, c(150, 50, 50, 4))
sbm_params <- get_sbm_params(n=50, L=4, n_c=c(4, 4), flip_layer=TRUE)
probability_1 = sbm_params[[1]]
probability_2 = sbm_params[[2]]
for(t_iter in 1:50) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_1)
for(t_iter in 51:100) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_2)
for(t_iter in 101:150) A.tensor[t_iter,,,] <- generate_tensor_probability_directed(n_1=50, n_2=50, L=4, probability_1)
hat.rank <- c(15, 15, 15)
A.tensor.even <- A.tensor[seq(2, 150, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, 149, by = 2), , , ]
if (dim(A.tensor.even)[1] != dim(B.tensor.odd)[1]) {
stop("Make sure even and odd have same length")
}
hat.rank <- c(15, 15, 15)
s <- 0
e <- 75
frobenius_holder <- numeric(74)
results_all_step1 <- cusum_on_intervals(CUSUM_step1, A.tensor.even, intervals, obj.B = B.tensor.odd)
intervals <- construct_intervals(75, sqrt(1/2), 2)
results_one <- cusum_on_intervals(CUSUM_step1, A.tensor.even, c(30, 38), obj.B = B.tensor.odd)
results_all_step1 <- cusum_on_intervals(CUSUM_step1, A.tensor.even, intervals, obj.B = B.tensor.odd)
# Pass in CUSUM results (as a matrix) to save computation
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1800, 600, 200, 50), method = "Narrowest", obj.B = B.tensor.odd)
results[[2]]
results[[3]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50), method = "Greedy", obj.B = B.tensor.odd)
results[[3]]
# Pass in CUSUM results (as a matrix) to save computation
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1800, 900, 500, 200, 50), method = "Narrowest", obj.B = B.tensor.odd)
results[[3]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50), method = "Greedy", obj.B = B.tensor.odd)
results[[3]]
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1)
threshold_list <- seq(1, max(init[[1]]$results[, 2]), length.out=25)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
results[[4]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50), method = "Greedy", obj.B = B.tensor.odd)
results[[4]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50, 10), method = "Greedy", obj.B = B.tensor.odd)
results[[4]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50, 1), method = "Greedy", obj.B = B.tensor.odd)
results[[4]]
results[[1]]
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1)
threshold_list <- seq(1, max(init[[1]]$results[, 2]), length.out=25)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
l <- c(-1807625, -929578.3, -929124.3, -937358.8)
plot(l)
l <- rev(c(-1807625, -929578.3, -929124.3, -937358.8))
plot(l)
threshold_list <- log(seq(1, max(init[[1]]$results[, 2]), length.out=50))
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
threshold_list <- seq(1, max(init[[1]]$results[, 2]), length.out=50)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
threshold_list <- seq(1, max(init[[1]]$results[, 2]) + 1, length.out=50)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
l <- rev(c(-1807625, -1161043, -929578.3, -929124.3, -937358.8, -940492.6))
plot(l)
l <- rev(c(-929578.3, -929124.3, -937358.8, -940492.6))
plot(l)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50, 1), method = "Greedy", obj.B = B.tensor.odd)
results[[6]]
results[[6]]
results[[6]]$results
results[[6]]$results$Gain
results[[6]]$results[, 2]
threshold_list <
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = results[[6]]$results[, 2], method = "Greedy", obj.B = B.tensor.odd)
threshold_list <
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = 2*results[[6]]$results[, 2], method = "Greedy", obj.B = B.tensor.odd)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = results[[6]]$results[, 2], method = "Greedy", obj.B = B.tensor.odd)
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
threshold_list <- seq(1, max(init[[1]]$results[, 2]) + 1, length.out=50)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, hat.rank = hat.rank)
# using utilities/model selection
model_selection(results, A.tensor, method = cal_BIC, hat.rank = hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, method = cal_BIC, hat.rank = hat.rank)
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50, 1), method = "Greedy", obj.B = B.tensor.odd)
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1)
init
sort(init)
sort(init[[1]])
sort(init[[1]]$results[, 2])
sort(init[[1]]$results[, 2], decreasing = TRUE)
sort(init[[2]]$results[, 2], decreasing = TRUE)
sort(init[[1]]$results[, 2], decreasing = TRUE)
source("utility.R")
ELBO(results, A.tensor, hat.rank)
source("utility.R")
ELBO(results, A.tensor, hat.rank)
source("utility.R")
# using utilities/model selection
model_selection(results, A.tensor, method = cal_BIC, hat.rank = hat.rank)
ELBO(results, A.tensor, hat.rank)
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1)
threshold_list <- seq(1, max(init[[1]]$results[, 2]) + 1, length.out=50)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
# using utilities/model selection
model_selection(results_ms, A.tensor, method = cal_BIC, hat.rank = hat.rank)
# using utilities/model selection
model_selection(results_ms, A.tensor, method = cal_AIC, hat.rank = hat.rank)
# Pass in CUSUM results (as a matrix) to save computation
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1800, 900, 500, 200, 1), method = "Narrowest", obj.B = B.tensor.odd)
results[[6]]
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = c(1000, 500, 250, 50, 1), method = "Greedy", obj.B = B.tensor.odd)
results[[6]]
# Thresholding using Greedy, top 10 Gains
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = 1, method = "Greedy", obj.B = B.tensor.odd)
results[[6]]
results[[2]]
results[[2]]$results[, 2]
results[[2]]$results[, 2][1:10]
# Thresholding using Greedy, top 10 Gains
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = 0, method = "Greedy", obj.B = B.tensor.odd)
results[[2]]$results[, 2][1:10]
results[[2]]$results
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
# Thresholding using Greedy, top 10 Gains
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = 0, method = "Greedy", obj.B = B.tensor.odd)
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
threshold_list
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
# using utilities/model selection
model_selection(results_ms, A.tensor, method = cal_AIC, hat.rank = hat.rank)
ELBO(results_ms, A.tensor, hat.rank)
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
ELBO(results_ms, A.tensor, hat.rank)
# Thresholding using Greedy, top 20 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
ELBO(results_ms, A.tensor, hat.rank)
threshold_list <- seq(1, max(init[[1]]$results[, 2]) + 1, length.out=50)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
log_lik <- ELBO(results_ms, A.tensor, hat.rank)
plot(log_lik)
plot(unique(log_lik))
threshold_list <- seq(1, max(init[[1]]$results[, 2]) + 1, length.out=50)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
log_lik <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(log_lik), y_lab = "Log-Likelihood", main = "Thresholds Equally Spaced")
plot(unique(log_lik), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
warnings()
plot(unique(log_lik), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
# Thresholding using Greedy, top 10 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
log_lik <- ELBO(results_ms, A.tensor, hat.rank)
plot(1:11 - 1, unique(log_lik),
xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
log_lik <- ELBO(results_ms, A.tensor, hat.rank)
plot(1:21 - 1, unique(log_lik),
xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
# Thresholding using Max Gain, log spacing
log(exp(5))
# Thresholding using Max Gain, log spacing
threshold_list <- log(c(seq(1, exp(max), length.out=49), exp(max) + 1))
max <-max(init[[1]]$results[, 2])
# Thresholding using Max Gain, log spacing
threshold_list <- log(c(seq(1, exp(max), length.out=49), exp(max) + 1))
max
exp(max)
# Thresholding using Max Gain, log spacing
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
threshold_list
# Thresholding using Max Gain, log spacing
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
log_lik <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(log_lik), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
results_ms
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(1:21 - 1, unique(out[[1]]),
xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
unique(out[[1]])
unique(out)
# Thresholding using Changepoints from Greedy, top 20 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
out[[1]]
out[[2]]
source("utility.R")
# Thresholding using Changepoints from Greedy, top 20 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
out[[1]]
out[[2]]
source("utility.R")
# Thresholding using Changepoints from Greedy, top 10 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
out[[1]]
source("utility.R")
# Thresholding using Max Gain, log spacing
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
out[[1]]
out[[2]]
source("utility.R")
# Thresholding using Changepoints from Greedy, top 10 Gains
threshold_list = c(max(init[[1]]$results[, 2]) + 1, init[[2]]$results[, 2][1:10])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
out[[1]]
out[[2]]
plot(out[[2]], out[[1]],
xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] <= 10]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 10]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced",
sub = "Less than 10 Changepoints")
plot(unique(out[[1]][out[[2]] < 10]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
# Thresholding using Max Gain, < 25 Changepoints
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 25]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 25 Changepoints", side = 3, line = 0.5, cex = 0.9)
# Thresholding using Max Gain, < 20 Changepoints
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 25]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 25 Changepoints", side = 3, line = 0.5, cex = 0.9)
out[[2]]
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]]), ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
init[[2]]$results[, 2][1:10]
init[[2]]$results[, 2]
out[[2]]
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 20]), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 10]), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
x_vals <- unique(out[[1]][out[[2]] < 10])
y_vals <- unique(out[[2]][out[[2]] < 10])
# Add labels under each point
text(x_vals, y_vals, labels = y_vals, pos = 1, cex = 0.8)
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
plot(unique(out[[1]][out[[2]] < 10]), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
x_vals <- unique(out[[1]][out[[2]] < 10])
y_vals <- unique(out[[2]][out[[2]] < 10])
# Add labels under each point
text(x_vals, y_vals, labels = y_vals, pos = 1, cex = 0.8)
x_vals
y_vals
out[[2]][out[[2]] < 10]
out[[2]]
text(-93600, 4, "bean")
plot(unique(out[[1]][out[[2]] < 15]), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
# Add labels under each point
text(x_vals, y_vals, labels = y_vals, pos = 1, cex = 0.8)
text(-936000, 4, "bean")
text(-980000, 4, "bean")
text(-980000, 4, "bean", pos = 1, cex = 0.8)
text(4, -980000, "bean", pos = 1, cex = 0.8)
text(x_vals, y_vals, "bean", pos = 1, cex = 0.8)
text(y_vals, x_vals, "bean", pos = 1, cex = 0.8)
text(where, vals, ncps, pos = 1, cex = 0.8)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
where <- 1:length(ncps)
text(where, vals, ncps, pos = 1, cex = 0.8)
plot(unique(out[[1]][out[[2]] < 15]), ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(where, vals, ncps, pos = 1, cex = 0.8)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 10 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 15 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 15 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 15 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list = c(max + 1, init[[2]]$results[, 2][1:20])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- out[[1]]
ncps <- out[[2]]
plot(ncps, vals, xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
plot(ncps, vals, xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
text(ncps, vals, ncps, pos = 1, cex = 0.8)
threshold_list = c(max + 1, init[[2]]$results[, 2][1:10])
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- out[[1]]
ncps <- out[[2]]
plot(ncps, vals, xlab = "Number of Changepoints", ylab = "Log-Likelihood", main = "Thresholds via Changepoints")
text(ncps, vals, ncps, pos = 1, cex = 0.8)
threshold_list <- exp(c(seq(1, log(max), length.out=49), log(max) + 1))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]])
ncps <- unique(out[[2]])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list <- c(seq(1, max, length.out=49), max + 1)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- ELBO(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]])
ncps <- unique(out[[2]])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list <- seq(1, max + 1, length.out=50)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- elbow(results_ms, A.tensor, hat.rank)
source("utility.R")
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = 0, method = "Greedy", obj.B = B.tensor.odd)
max <-max(init[[1]]$results[, 2])
init[[2]]$results[, 2]
threshold_list <- seq(1, max + 1, length.out=50)
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- elbow(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]])
ncps <- unique(out[[2]])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Equally Spaced")
mtext("Less than 15 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
threshold_list <- exp(seq(1, log(max) + 1, length.out=50))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- elbow(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]])
ncps <- unique(out[[2]])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
out <- elbow(results_ms, A.tensor, hat.rank)
vals <- unique(out[[1]][out[[2]] < 15])
ncps <- unique(out[[2]][out[[2]] < 15])
plot(vals, ylab = "Log-Likelihood", main = "Thresholds Log-Spaced")
mtext("Less than 15 Changepoints", side = 3, line = 0.5, cex = 0.9)
text(1:length(ncps), vals, ncps, pos = 1, cex = 0.8)
