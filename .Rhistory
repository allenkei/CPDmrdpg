cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
break
}
load("data/seq10n50s3.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Manually Change
true_CP <- c(50,100,150,200,250,300,350) # Manually Change
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold*c(1, 0.5, 0.1),
method = "Greedy", verbose = TRUE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nDetected CP after model selection:", detected_CP, "\n")
cat("metrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
break
}
results[[4]]
load("data/seq10n50s1.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
true_CP <- c(50,100) # Manually Change
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Greedy", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nDetected CP after model selection:", detected_CP, "\n")
cat("metrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nDetected CP after model selection:", detected_CP, "\n")
cat("metrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n50s2.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
true_CP <- c(50,100) # Manually Change
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nDetected CP after model selection:", detected_CP, "\n")
cat("metrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n50s3.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
true_CP <- c(50,100,150,200,250,300,350) # Sce 3
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nDetected CP after model selection:", detected_CP, "\n")
cat("metrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
cat("threshold: ",threshold, "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n50s4.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
# true_CP <- c(50,100,150,200,250,300,350) # Sce 3
true_CP <- c() # Sce 4
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n")
cat("\tthreshold: ",threshold, "\n")
cat("\tmetrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
load("data/seq10n100s4.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
# true_CP <- c(50,100,150,200,250,300,350) # Sce 3
true_CP <- c() # Sce 4
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]], "\n", sep = "")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
metric_list
metric_list[[]]
metric_list[[:]]
metric_list[[c(1:4)]]
metric_list[c(1:4)]
metric_list[c(1:4), drop = TRUE]
metric_list
vector(metric_list)
as.vector(metric_list)
dim(as.vector(metric_list))
as.vector(metric_list)
(as.vector(metric_list))[1:4]
(as.vector(metric_list))[[1:4]][1]
(as.vector(metric_list))[[1:4]][[1]]
(as.numeric(metric_list))
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
load("data/seq10n50s4.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
# true_CP <- c(50,100,150,200,250,300,350) # Sce 3
true_CP <- c() # Sce 4
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
load("data/seq10n100s4.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
# true_CP <- c(50,100,150,200,250,300,350) # Sce 3
true_CP <- c() # Sce 4
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n100s2.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
true_CP <- c(50,100) # Sce 1, 2
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n100s1.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
true_CP <- c(50,100) # Sce 1, 2
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration ", seq_iter, " detected CP:", detected_CP, "\n", sep = "")
cat("\tthreshold: ",threshold, "\n", sep = "")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
load("data/seq10n100s3.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
# true_CP <- c(50,100) # Sce 1, 2
true_CP <- c(50,100,150,200,250,300,350) # Sce 3
threshold <- num_node*num_layer*sqrt(log(num_T))
# construct intervals (FIXED for all sequences)
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2) # half of full time span
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration", seq_iter, "detected CP:", detected_CP, "\n")
cat("\tthreshold: ",threshold, "\n")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
output_holder
intervals <- NULL
load("data/seq10n50s1.RData") # Scenario 1 with node 50
dim(A.all_seq) # 10 150  50  50   4
num_seq <- dim(A.all_seq)[1] # 10 sequences
num_T <- dim(A.all_seq)[2] # 150 time points
num_node <- dim(A.all_seq)[3]
num_layer <- dim(A.all_seq)[5]
hat.rank <- c(15, 15, 15) # needed for model selection (Question: should be used as input to some FUNC)
true_CP <- c(50,100) # Sce 1, 2
threshold <- num_node*num_layer*sqrt(log(num_T))
seq_iter <- 1 # used to test INSIDE the for-loop
output_holder <- matrix(NA, nrow = num_seq, ncol = 4) # 4 metrics
# report mean of metric for all simulated sequences
# can suppress print statements with verbose = FALSE (default TRUE)
for(seq_iter in 1:num_seq){
# if(seq_iter == 6) break
A.tensor <- A.all_seq[seq_iter,,,,] # a particular sequence with dim 150  50  50   4
# splitting data in half
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ] # named as B.tensor
# threshold = threshold*c(1, 0.5, 0.1) # If I want to test more
results <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, threshold = threshold,
method = "Narrowest", verbose = FALSE, obj.B = B.tensor.odd)
detected_CP <- 2*sort(results[[2]]$results[, 1])
metric_list <- eval_CP(true_CP, detected_CP, num_T)
cat("\nIteration", seq_iter, "detected CP:", detected_CP, "\n")
cat("\tthreshold: ",threshold, "\n")
cat("\tmetrics: ",as.numeric(metric_list), "\n")
print(results[[2]]$results)
output_holder[seq_iter ,] <- c(metric_list[[1]], metric_list[[2]], metric_list[[3]], metric_list[[4]])
}
num_node*num_layer*sqrt(log(num_T))
num_node*num_layer*sqrt(log(num_T/2))
num_node*num_node*num_layer*sqrt(log(num_T))
sqrt(log(num_node*num_node*num_layer*num_T))
log(num_node*num_node*num_layer*num_T))
log(num_node*num_node*num_layer*num_T)
num_node*num_node*num_layer*sqrt(log(num_T))
n_node*hat.rank[1]*hat.rank[2] + n_node*hat.rank[2]*hat.rank[3] + n_node*hat.rank[1]*hat.rank[3]
num_node*hat.rank[1]*hat.rank[2] + num_node*hat.rank[2]*hat.rank[3] + num_node*hat.rank[1]*hat.rank[3]
num_node*num_node*num_layer
A.tensor <- A.all_seq[1,,,,]
hat.rank <- c(15, 15, 4)
s <- 0
e <- 150
frobenius_holder <- numeric(149)
for(t in 2:148){
frobenius_holder[t] <- CUSUM_frob_SBS(A.tensor, s, e, t, hat.rank)
}
plot(1:149, frobenius_holder, type='l')
A.tensor.even <- A.tensor[seq(2, num_T, by = 2), , , ]
B.tensor.odd  <- A.tensor[seq(1, num_T-1, by = 2), , , ]
if (dim(A.tensor.even)[1] != dim(B.tensor.odd)[1]) {
stop("Make sure even and odd have same length")
}
hat.rank <- c(15, 15, 15)
s <- 0
e <- 75
frobenius_holder <- numeric(74)
for(t in 2:(num_T/2-2)){
frobenius_holder[t] <- CUSUM_step1(A.tensor.even, s, e, t, obj.B = B.tensor.odd)
}
plot(1:(num_T/2-1), frobenius_holder, type='l')
intervals <- construct_intervals(num_T/2, sqrt(1/2), 2)
results_one <- cusum_on_intervals(CUSUM_step1, A.tensor.even, c(30, 38), obj.B = B.tensor.odd)
results_all_step1 <- cusum_on_intervals(CUSUM_step1, A.tensor.even, intervals, obj.B = B.tensor.odd)
# using utilities/model selection
# Both AIC and BIC prefer fewest (0) changepoints
# New l1 penalty - which requires tuning parameter
init <- seeded_binary_seg(CUSUM_step1, A.tensor.even, num_T/2, CUSUM_res = results_all_step1,
threshold = 0, method = "Greedy", obj.B = B.tensor.odd)
max <-max(init[[1]]$results[, 2])
threshold_list <- exp(seq(1, log(max) + 1, length.out=50))
results_ms <- seeded_binary_seg(CUSUM_step1, A.tensor.even, 75, CUSUM_res = results_all_step1,
threshold = threshold_list, method = "Greedy", obj.B = B.tensor.odd)
out <- model_selection(results_ms, A.tensor, method = "BIC", hat.rank = hat.rank)
plot(unique(out[[4]]))
hat.rank
out <- model_selection(results_ms, A.tensor, method = "AIC", hat.rank = c(15, 15, 4))
plot(unique(out[[4]]))
